// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweets    Tweet[]
  likes     Like[]   // いいね関連を追加
  
  // フォロー関係を追加
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]   // いいね関連を追加
}

// いいね機能のためのモデルを追加
model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())
  
  // 同じユーザーが同じツイートに複数回いいねできないようにユニーク制約を設定
  @@unique([userId, tweetId])
}

// フォロー関係を表すモデルを追加
model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  
  // 同じユーザーペアの重複を防ぐためのユニーク制約
  @@unique([followerId, followingId])
}
